%{
#include "pickaxe.h"
#include "ltl.h"
extern LTLExpr *parsed;

static FILE *fp_queries;
void init_yy()
{
	fp_queries = fopen("queries", "r");
	if (fp_queries == NULL) 
	{
		printf("File not found: queries");
		exit(1);
	}
}

#define YY_INPUT(buf, result, max_size)		\
  {												\
    int yyc= fgetc(fp_queries); \
    result= (-1 == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));				\
  }
#define YYSTYPE LTLExpr*
%}
Stmt	= - e:Expr EOL		{ parsed = e; }
	| ( !EOL . )* EOL		{ printf("LTL parse error\n"); parsed = NULL; }

Expr	= s:Or				{ $$= s; }


Or	= l:And
		( PIPE  r:And	{ l = create_ltl(l, r, ltl_or); }
		)*				{ $$= l; }

And	= l:Impl
		( AMP  r:Impl	{ l = create_ltl(l, r, ltl_and);}
		)*				{ $$= l; }
Impl = l:Iff
		( ARROW  r:Iff	{ l = create_ltl(l, r, ltl_imp);}
		)*				{ $$= l; }
Iff	= l:Temp
		( BIARROW  r:Temp	{ l = create_ltl(l, r, ltl_iff);}
		)*				{ $$= l; }

Temp = n:Not								
	   | 'X' - l:Not 						{ $$ = create_ltl(l, NULL, ltl_x);}	   
	   | 'F' - l:Not 						{ $$ = create_ltl(l, NULL, ltl_f); }	   
	   | 'G' - l:Not 						{ $$ = create_ltl(l, NULL, ltl_g); }	   
	   | '[' - l:Not - 'U' - r:Not - ']' 	{ $$ = create_ltl(l, r, ltl_u); }
	   
Not = l:Prop				
	| EXCL l:Prop			{ $$ = create_ltl(l, NULL, ltl_not);}

Prop = l:Term				
     | OPEN i:Expr CLOSE	{ $$= i; }

Term = i:ATOMIC				{ $$= i; }
      | i:PLACEHOLDER		{ $$= i; }
      | i:CONST				{ $$= i; }
      

PLACEHOLDER	= < '?'[a-zA-Z0-9_]+ >	-		{ $$ = create_placeholder(yytext); }
ATOMIC	= < [a-z0-9_]+ >	-		{ $$ = create_atomic(yytext); }
CONST = <'true'>- | <'false'>-		{ $$ = create_const(yytext); }
EXCL	= '!'	-
PIPE	= '|'		-
AMP		= '&'		-
ARROW	= '->'		-
BIARROW	= '<->'		-
OPEN	= '('		-
CLOSE	= ')'		-
-	= [ \t]*
EOL	= '\n' | '\r\n' | '\r' | ';'

%%

